{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/shantanukumar/Poshan/app/api/medicine/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { GoogleGenerativeAI } from '@google/generative-ai'\n\nconst FDA_API_KEY = process.env.FDA_API_KEY\nconst GOOGLE_API_KEY = process.env.GOOGLE_API_KEY\n\nconst genAI = new GoogleGenerativeAI(GOOGLE_API_KEY || '')\n\nasync function searchFDA(query: string) {\n  try {\n    const response = await fetch(\n      `https://api.fda.gov/drug/label.json?api_key=${FDA_API_KEY}&search=openfda.brand_name:\"${encodeURIComponent(query)}\" OR openfda.generic_name:\"${encodeURIComponent(query)}\"&limit=5`\n    )\n    \n    if (!response.ok) {\n      throw new Error(`FDA API responded with status ${response.status}`);\n    }\n\n    const data = await response.json()\n    return data.results.map((result: any) => ({\n      id: result.id,\n      name: result.openfda.brand_name?.[0] || 'Unknown',\n      genericName: result.openfda.generic_name?.[0] || 'Unknown',\n      description: result.description?.[0] || 'No description available',\n      indications: result.indications_and_usage?.[0] || 'No indications available',\n      warnings: result.warnings?.[0] || 'No warnings available',\n      dosage: result.dosage_and_administration?.[0] || 'No dosage information available',\n    }))\n  } catch (error) {\n    console.error('Error fetching from FDA:', error)\n    return null\n  }\n}\n\nasync function searchGemini(query: string) {\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" })\n    \n    const prompt = `Provide detailed medical information about \"${query}\" in this exact format:\n\nName: [Medicine Name]\nGeneric Name: [Generic Name if available, otherwise \"Unknown\"]\nDescription: [Detailed description of what this medicine is]\nIndications: [What conditions this medicine treats]\nWarnings: [Important safety warnings and side effects]\nDosage: [General dosage guidelines]\n\nPlease ensure all information is evidence-based and follows medical guidelines. If this exact medicine isn't known, provide information about the closest known similar medicine or drug class, but clearly state this fact in the description.`\n\n    const result = await model.generateContent([\n      { text: prompt }\n    ])\n    \n    const response = await result.response\n    const text = response.text()\n\n    // Parse the generated text into an object\n    const sections = text.split('\\n')\n    const medicineInfo: Record<string, string> = {}\n    \n    sections.forEach(section => {\n      const [key, ...valueParts] = section.split(': ')\n      if (key && valueParts.length > 0) {\n        const cleanKey = key.toLowerCase().replace(/[^a-z]/g, '')\n        medicineInfo[cleanKey] = valueParts.join(': ').trim()\n      }\n    })\n\n    return [{\n      id: `gemini-${Date.now()}`,\n      name: medicineInfo.name || query,\n      genericName: medicineInfo.genericname || 'Unknown',\n      description: medicineInfo.description || 'No description available',\n      indications: medicineInfo.indications || 'No indications available',\n      warnings: medicineInfo.warnings || 'No warnings available',\n      dosage: medicineInfo.dosage || 'No dosage information available',\n    }]\n  } catch (error) {\n    console.error('Error fetching from Gemini:', error)\n    return null\n  }\n}\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const query = searchParams.get('query')\n\n  if (!query) {\n    return NextResponse.json(\n      { error: 'Query parameter is required' }, \n      { status: 400 }\n    )\n  }\n\n  let medicines = await searchFDA(query)\n\n  if (!medicines || medicines.length === 0) {\n    medicines = await searchGemini(query)\n  }\n\n  if (!medicines || medicines.length === 0) {\n    return NextResponse.json(\n      { error: 'No medicine information found' }, \n      { status: 404 }\n    )\n  }\n\n  return NextResponse.json(medicines)\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}