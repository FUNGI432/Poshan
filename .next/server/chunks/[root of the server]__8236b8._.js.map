{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///Users/shantanukumar/Poshan/app/api/analyze/route.ts"],"sourcesContent":["// app/api/analyze/route.ts\nimport { NextResponse } from 'next/server';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport fs from 'fs';\nimport path from 'path';\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY!);\n\nconst SYSTEM_PROMPT = `\nYou are an expert Food Product Analyst specialized in ingredient analysis and nutrition science. \nYour role is to analyze product ingredients, provide health insights, and identify potential concerns by combining ingredient analysis with deep scientific research. \n`;\n\nconst INSTRUCTIONS = `\n* Read ingredient list from product image \n* Remember the user may not be educated about the product, break it down in simple words\n* Identify artificial additives and preservatives and list them\n* Check against major dietary restrictions (veg, nonveg, vegan, halal, kosher, religion related)\n* Rate nutritional value on scale of 1-5\n* Highlight key health implications or concerns\n* Suggest healthier alternatives if needed\n* Provide brief evidence-based recommendations\n* List non-healthy ingredients \n`;\n\nasync function getImageAsBase64(imagePath: string): Promise<string> {\n  try {\n    // If it's already a base64 data URL, extract the base64 part\n    if (imagePath.startsWith('data:image')) {\n      const base64Data = imagePath.split(',')[1];\n      if (!base64Data) throw new Error('Invalid data URL format');\n      return base64Data;\n    }\n\n    // If it's a local path, read the file and convert to base64\n    const cleanPath = imagePath.replace(/^\\//, '');\n    const publicPath = path.join(process.cwd(), 'public', cleanPath);\n    console.log('Reading image from:', publicPath);\n    \n    const imageBuffer = await fs.promises.readFile(publicPath);\n    return imageBuffer.toString('base64');\n  } catch (error) {\n    console.error('Error processing image:', error);\n    throw new Error(`Failed to process image: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { image } = await request.json();\n    if (!image) {\n      return NextResponse.json({ error: 'No image provided' }, { status: 400 });\n    }\n\n    console.log('Processing image request:', \n      image.substring(0, 50) + '...'\n    );\n\n    // Convert image to base64 if needed\n    const base64Image = await getImageAsBase64(image);\n    \n    // Initialize the model\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n    console.log('Sending request to Gemini API...');\n    \n    // Analyze the image\n    const result = await model.generateContent([\n      { text: SYSTEM_PROMPT },\n      { text: INSTRUCTIONS },\n      {\n        inlineData: {\n          mimeType: \"image/jpeg\",\n          data: base64Image\n        }\n      }\n    ]);\n\n    const response = await result.response;\n    const analysis = response.text();\n\n    return NextResponse.json({ analysis });\n  } catch (error) {\n    console.error('Analysis failed:', error);\n    \n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const errorResponse = {\n      error: 'Analysis failed',\n      details: errorMessage,\n      timestamp: new Date().toISOString()\n    };\n\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}"],"names":[],"mappings":"AAAA,2BAA2B;;;;AAC3B;AACA;AACA;AACA;;;;;AAEA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAE/D,MAAM,gBAAgB,CAAC;;;AAGvB,CAAC;AAED,MAAM,eAAe,CAAC;;;;;;;;;;AAUtB,CAAC;AAED,eAAe,iBAAiB,SAAiB;IAC/C,IAAI;QACF,6DAA6D;QAC7D,IAAI,UAAU,UAAU,CAAC,eAAe;YACtC,MAAM,aAAa,UAAU,KAAK,CAAC,IAAI,CAAC,EAAE;YAC1C,IAAI,CAAC,YAAY,MAAM,IAAI,MAAM;YACjC,OAAO;QACT;QAEA,4DAA4D;QAC5D,MAAM,YAAY,UAAU,OAAO,CAAC,OAAO;QAC3C,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;QACtD,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,MAAM,cAAc,MAAM,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC/C,OAAO,YAAY,QAAQ,CAAC;IAC9B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;IACxG;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QACpC,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,QAAQ,GAAG,CAAC,6BACV,MAAM,SAAS,CAAC,GAAG,MAAM;QAG3B,oCAAoC;QACpC,MAAM,cAAc,MAAM,iBAAiB;QAE3C,uBAAuB;QACvB,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAmB;QAEnE,QAAQ,GAAG,CAAC;QAEZ,oBAAoB;QACpB,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;YACzC;gBAAE,MAAM;YAAc;YACtB;gBAAE,MAAM;YAAa;YACrB;gBACE,YAAY;oBACV,UAAU;oBACV,MAAM;gBACR;YACF;SACD;QAED,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,MAAM,WAAW,SAAS,IAAI;QAE9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAS;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAElC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,MAAM,gBAAgB;YACpB,OAAO;YACP,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,eAAe;YAAE,QAAQ;QAAI;IACxD;AACF"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}