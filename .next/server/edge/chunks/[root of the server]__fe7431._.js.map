{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/extractreportgemini/route.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { NextResponse } from \"next/server\";\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY!);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-pro\" });\n\nconst prompt = `Attached is an image of a clinical report. \nIdentify biomarkers showing abnormalities and summarize the findings. Ensure numerical values and key details are included, but exclude personal information.`;\n\nexport async function POST(req: Request) {\n    try {\n        const { base64 } = await req.json();\n        if (!base64 || typeof base64 !== \"string\") {\n            return NextResponse.json({ error: \"Invalid or missing image data\" }, { status: 400 });\n        }\n\n        console.log(\"Processing medical report...\");\n\n        const filePart = {\n            inlineData: {\n                data: base64.split(\",\")[1],\n                mimeType: base64.split(\";\")[0].split(\":\")[1],\n            },\n        };\n\n        const generatedContent = await model.generateContent([prompt, filePart]);\n\n        if (!generatedContent.response?.candidates) {\n            throw new Error(\"Failed to get AI response\");\n        }\n\n        return NextResponse.json({ text: generatedContent.response.candidates[0].content.parts[0].text });\n    } catch (error) {\n        console.error(\"API Error:\", error);\n        return NextResponse.json({ error: \"Failed to process report\" }, { status: 500 });\n    }\n}\n\nexport const runtime = \"edge\";"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAEA,MAAM,QAAQ,IAAI,wKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAC/D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IAAE,OAAO;AAAiB;AAEjE,MAAM,SAAS,CAAC;6JAC6I,CAAC;AAEvJ,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QACjC,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;YACvC,OAAO,+LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,QAAQ,GAAG,CAAC;QAEZ,MAAM,WAAW;YACb,YAAY;gBACR,MAAM,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE;gBAC1B,UAAU,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAChD;QACJ;QAEA,MAAM,mBAAmB,MAAM,MAAM,eAAe,CAAC;YAAC;YAAQ;SAAS;QAEvE,IAAI,CAAC,iBAAiB,QAAQ,EAAE,YAAY;YACxC,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO,+LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM,iBAAiB,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI;QAAC;IACnG,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,+LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF;AACJ;AAEO,MAAM,UAAU"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}